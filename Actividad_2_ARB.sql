/* EJERCICIO 1*/

CREATE DATABASE EQUIPOS;
USE EQUIPOS;
CREATE TABLE IF NOT EXISTS EQUIPO (
	IDEQUIPO INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    NOMBRE VARCHAR(100) NOT NULL,
    DESCRIPCION VARCHAR(500),
    PRECIO FLOAT(8,3) NOT NULL);
    
CREATE TABLE IF NOT EXISTS CLIENTES (
	NIF VARCHAR(15) PRIMARY KEY NOT NULL,
    NOMBRE CHAR(100) NOT NULL,
    DIRECCION TEXT(500),
    POBLACION CHAR(255));
    
CREATE TABLE IF NOT EXISTS COMPRA (
	IDEQUIPO INT,
    NIF VARCHAR(15),
	FECHA DATE NOT NULL,
    NUM INT NOT NULL,
    CONSTRAINT PK_COMPRA PRIMARY KEY (IDEQUIPO, NIF),
    CONSTRAINT FK_IDEQUIPO FOREIGN KEY (IDEQUIPO) REFERENCES EQUIPO (IDEQUIPO),
    CONSTRAINT FK_NIF FOREIGN KEY (NIF) REFERENCES CLIENTES (NIF)
    );
    
CREATE TABLE IF NOT EXISTS CATEGORIA (
	IDCATEGORIA INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    NOMBRE CHAR(150)
    );    
    
CREATE TABLE IF NOT EXISTS COMPONENTES (
	IDCOMPONETE INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    NOMBRE CHAR(150) UNIQUE,
    CARACTERISTICAS TEXT(500),
    STOCK INT,
    IDCATEGORIA INT,
    CONSTRAINT FK_IDCATEGORIA FOREIGN KEY (IDCATEGORIA) REFERENCES CATEGORIA (IDCATEGORIA)
    );
    
CREATE TABLE IF NOT EXISTS CONSTA (
	IDEQUIPO INT,
    IDCOMPONETE INT,
    NUM INT,
    CONSTRAINT PK_CONSTA PRIMARY KEY (IDEQUIPO, IDCOMPONETE),
    CONSTRAINT FK_EQUIPO FOREIGN KEY (IDEQUIPO) REFERENCES EQUIPO (IDEQUIPO),
    CONSTRAINT FK_COMPONETE FOREIGN KEY (IDCOMPONETE) REFERENCES COMPONENTES (IDCOMPONETE)
    );    
    
CREATE INDEX IND_NOM_EQUI ON EQUIPO (NOMBRE);

CREATE INDEX IND_NOM_CLI ON CLIENTES (NOMBRE);

/* EJERCICIO 2 */

USE PEDIDOS;

-- 1. VENDEDORES QUE ENTRARON A TRABAJAR EN 1996
SELECT NOMBRE, FECHA_ALTA FROM VENDEDOR WHERE FECHA_ALTA BETWEEN '1996-01-01' AND '1996-12-31';

-- 2. LISTA VENDEDOR POR CIUDAD Y PROVINCIA DONDE SE ENCUENTRA SU OFICINA ORDENADOS POR PROVINCIA
SELECT vendedor.NOMBRE, OFICINA.PROVINCIA, OFICINA.CIUDAD FROM VENDEDOR INNER JOIN OFICINA
ON VENDEDOR.OFICINA = OFICINA.CODIGO
ORDER BY PROVINCIA;

-- 3. LISTA PEDIDOS DEL FABRICANTE 'ACI' EN 2012
SELECT FABRICANTE, FECHA, VENDEDOR, PRODUCTO, CLIENTE, CANTIDAD FROM PEDIDO
WHERE FABRICANTE = 'ACI' AND  FECHA BETWEEN '2012-01-01' AND '2012-12-31'
ORDER BY FECHA;
-- CANTIDAD TOTAL DE PEDIDOS REALIZADOS POR 'ACI' EN 2012
SELECT FABRICANTE, SUM(CANTIDAD) AS 'CANTIDAD TOTAL DE PEDIDOS EN 2012' FROM PEDIDO
WHERE FABRICANTE = 'ACI' AND FECHA BETWEEN '2012-01-01' AND '2012-12-31';

-- 4. PRODUCTOS QUE CONTIENEN LAS LETRAS 'TM' CON PRECIO INFERIOR A 1000
SELECT * FROM PRODUCTO WHERE PRECIO < 1000 AND DESCRIPCION LIKE '%TM%';
SELECT * FROM PRODUCTO WHERE PRECIO < 1000 AND DESCRIPCION LIKE 'TM%';
SELECT * FROM PRODUCTO WHERE PRECIO < 1000 AND DESCRIPCION LIKE '%TM';
SELECT * FROM PRODUCTO WHERE PRECIO < 1000 AND DESCRIPCION LIKE '_TM%';

-- 5. VENDEDORES CON CATEGORIA 'JEFE DE EQUIPO' O 'REPRESENTANTE'
SELECT NOMBRE, CATEGORIA FROM VENDEDOR WHERE CATEGORIA IN ('JEFE EQUIPO','REPRESENTANTE')
ORDER BY CATEGORIA;

-- 6. VENDEDORES QUE HAN VENDIDO 6, 8 O 24 PRODUCTOS
SELECT DISTINCT VENDEDOR.NOMBRE, PEDIDO.VENDEDOR FROM VENDEDOR
INNER JOIN PEDIDO ON VENDEDOR.CODIGO = PEDIDO.VENDEDOR
WHERE PEDIDO.VENDEDOR IN ('6', '8', '24');

-- 7. VENDEDORES QUE HAY EN CADA OFICINA MOSTRANDO TAMBIEN LAS OFICINAS SIN VENDEDORES
SELECT VENDEDOR.CODIGO, VENDEDOR.NOMBRE, OFICINA.CODIGO, OFICINA.CIUDAD, OFICINA.PROVINCIA
FROM VENDEDOR  RIGHT OUTER JOIN OFICINA ON VENDEDOR.OFICINA = OFICINA.CODIGO;

-- 8. VENDEDORES CON EDAD SUPERIOR A MARIA MONS Y QUE SON DE LA OFICINA 21
SELECT * FROM VENDEDOR
WHERE EDAD>(SELECT EDAD FROM VENDEDOR WHERE NOMBRE = 'MARIA MONS')
AND OFICINA = '21';

-- COMPRUEBO QUE ES CORRECTO EL RESULTADO
SELECT * FROM VENDEDOR ORDER BY EDAD AND OFICINA;
SELECT * FROM VENDEDOR WHERE EDAD > 31 AND OFICINA IN('21');

-- 9. STOCK DE FABRICANTES QUE SUPERAN LAS 100 UNIDADES
SELECT FABRICANTE, SUM(ESTOC) 
FROM PRODUCTO
GROUP BY FABRICANTE
HAVING SUM(ESTOC) > 100;

-- 10. VENDEDOR CON MAS VENTAS
SELECT NOMBRE, VENTAS
FROM VENDEDOR
WHERE VENTAS = (SELECT MAX(VENTAS) FROM VENDEDOR);

-- 11. VENDEDOR JUNTO AL NOMBRE DE SU JEFE ORDENADO POR EL NOMBRE DEL JEFE
SELECT PEON.CODIGO, PEON.NOMBRE, PEON.JEFE,
' ESTA AL CARGO DE ', 
BOSS.CODIGO, BOSS.NOMBRE 
FROM  VENDEDOR PEON, VENDEDOR BOSS  
WHERE PEON.JEFE = BOSS.CODIGO
ORDER BY BOSS.NOMBRE;

-- 12. PEDIDOS (CODIGO, FECHA Y CANTIDAD) DEL 2015 DEL VENDEDOR DE MENOR EDAD
SELECT P.CODIGO, P.FECHA, P.CANTIDAD, V.NOMBRE, V.EDAD FROM PEDIDO P
INNER JOIN VENDEDOR V ON P.VENDEDOR = V.CODIGO
WHERE V.EDAD = (SELECT MIN(EDAD) FROM VENDEDOR)
AND P.FECHA BETWEEN '2015-01-01' AND '2015-12-31';

-- COMPRUEBO QUE EL VENDEDOR DE MENOR EDAD NO TIENE PEDIDOS EN EL AÑO 2015
SELECT P.CODIGO, P.FECHA, P.CANTIDAD, V.NOMBRE, V.EDAD FROM PEDIDO P
INNER JOIN VENDEDOR V ON P.VENDEDOR = V.CODIGO
WHERE V.EDAD = (SELECT MIN(EDAD) FROM VENDEDOR);


-- 13. VENDEDORES CON CANTIDAD DE PEDIDOS SUPERIOR A 40 Y QUE NO SEAN DE TARRAGONA
SELECT * FROM  VENDEDOR V
GROUP BY V.NOMBRE
HAVING V.CODIGO > (SELECT CANTIDAD FROM PEDIDO WHERE CANTIDAD = 40)
AND V.OFICINA NOT IN( SELECT PROVINCIA FROM OFICINA WHERE PROVINCIA = 'TARRAGONA');

-- COMPRUEBO QUE NO ME ENGAÑA EL SISTEMA
SELECT V.NOMBRE, P.CANTIDAD
FROM PEDIDO P INNER JOIN VENDEDOR V ON P.VENDEDOR = V.CODIGO
GROUP BY V.NOMBRE
HAVING P.CANTIDAD > 40;


-- 14. NOMBRE, VENTAS, CUOTA DE CADA VENDEDOR MAS UN NUEVO CAMPO LLAMADO NUEVACUOTA
-- CON EL INCREMENTO DEL 10% DEL VALOR ACTUAL DE LA CUOTA, SOLO DEBEN APARECER LOS
-- VENDEDORES QUE TIENEN OFICINA ASIGNADA

SELECT NOMBRE, VENTAS, CUOTA, CONCAT( CUOTA * 0.1 + CUOTA) AS 'NUEVA CUOTA', OFICINA
FROM VENDEDOR
WHERE OFICINA IS NOT NULL ;

    
    
    
    
    
    
    